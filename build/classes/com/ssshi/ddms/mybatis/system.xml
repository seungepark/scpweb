<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper      
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"      
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ssshi.ddms.mybatis.dao.SystemDaoI">

	<select id="getGroupList" parameterType="paramBean" resultType="authGroupBean">
		SELECT SQL_CALC_FOUND_ROWS 
			UID, GROUPNAME, DESCRIPTION, STATUS 
		FROM AUTHGROUP 
		<if test="search != null and search.length() > 0">
			WHERE LOWER(GROUPNAME) LIKE CONCAT('%', LOWER(#{search}), '%') 
				OR LOWER(DESCRIPTION) LIKE CONCAT('%', LOWER(#{search}), '%')
		</if>
		<choose>
			<when test="sort != null and sort == 'group'">
				ORDER BY GROUPNAME 
			</when>
			<when test="sort != null and sort == 'desc'">
				ORDER BY DESCRIPTION 
			</when>
			<when test="sort != null and sort == 'status'">
				ORDER BY STATUS 
			</when>
			<otherwise>
				ORDER BY SHIPINFOUID, UID 
			</otherwise>
		</choose>
		<choose>
			<when test="order != null and order == 'desc'">
				DESC 
			</when>
			<otherwise>
				ASC 
			</otherwise>
		</choose>
		LIMIT #{start}, #{limit}
	</select>
	
	<select id="getGroupListCnt" resultType="int">
		SELECT FOUND_ROWS()
	</select>

	<select id="getUserList" parameterType="paramBean" resultType="userInfoBean">
		SELECT SQL_CALC_FOUND_ROWS 
			U.UID, U.USERID, U.FIRSTNAME, U.LASTNAME, PC.DESCRIPTION AS POSCODE, U.STATUS, SI.IMO, SI.TITLE AS SHIPTITLE
		FROM USERINFO U
			LEFT OUTER JOIN (
				SELECT DMI.VAL, DMI.DESCRIPTION FROM DOMAIN DM
					LEFT OUTER JOIN DOMAININFO DMI ON (DM.UID = DMI.DOMAINUID)
				WHERE DM.DOMAIN = 'POSCODE' 
			) PC ON (PC.VAL = U.POSCODE)
			LEFT OUTER JOIN SHIPINFO SI ON (SI.UID = U.SHIPINFOUID)
		WHERE U.STATUS != 'DEL'
		<if test="search != null and search.length() > 0">
			AND (
				U.USERID LIKE CONCAT('%', LOWER(#{search}), '%') 
				OR LOWER(U.FIRSTNAME) LIKE CONCAT('%', LOWER(#{search}), '%')
				OR LOWER(U.LASTNAME) LIKE CONCAT('%', LOWER(#{search}), '%')
				)
		</if>
		<choose>
			<when test="sort != null and sort == 'id'">
				ORDER BY U.USERID 
			</when>
			<when test="sort != null and sort == 'craft'">
				ORDER BY PC.DESCRIPTION 
			</when>
			<when test="sort != null and sort == 'first'">
				ORDER BY U.FIRSTNAME 
			</when>
			<when test="sort != null and sort == 'last'">
				ORDER BY U.LASTNAME 
			</when>
			<when test="sort != null and sort == 'status'">
				ORDER BY U.STATUS 
			</when>
			<otherwise>
				ORDER BY U.SHIPINFOUID, U.UID 
			</otherwise>
		</choose>
		<choose>
			<when test="order != null and order == 'desc'">
				DESC 
			</when>
			<otherwise>
				ASC 
			</otherwise>
		</choose>
		LIMIT #{start}, #{limit}
	</select>
	
	<select id="getUserListCnt" resultType="int">
		SELECT FOUND_ROWS()
	</select>
	
	<select id="getAuthList" resultType="authInfoBean">
		SELECT UID, AUTHCODE, KIND, DESCRIPTION, UPAUTHINFOUID 
		FROM AUTHINFO
		WHERE STATUS = 'ACT'
		ORDER BY ORD
	</select>
	
	<insert id="insertGroup" parameterType="authGroupBean">
		INSERT INTO AUTHGROUP (GROUPNAME, DESCRIPTION, KIND, STATUS, INSERTBY, INSERTDATE, UPDATEBY, UPDATEDATE)
		VALUES (#{groupName}, #{description}, #{kind}, #{status}, #{userUid}, SYSDATE(), #{userUid}, SYSDATE())
		<selectKey resultType="int" keyProperty="uid" order="AFTER">
	        SELECT LAST_INSERT_ID()
	    </selectKey>
	</insert>
	
	<select id="getCaptainUid" resultType="int">
		SELECT UID FROM AUTHGROUP
		WHERE KIND = 'CAPTAIN'
	</select>
	
	<insert id="insertLine" parameterType="apprLineBean">
		INSERT INTO APPRLINE (FROMAUTHGROUPUID, TOAUTHGROUPUID, APPRAUTH, STATUS, INSERTBY, INSERTDATE, UPDATEBY, UPDATEDATE)
		VALUES (#{fromAuthGroupUid}, #{toAuthGroupUid}, #{apprAuth}, 'ACT', #{userUid}, SYSDATE(), #{userUid}, SYSDATE())
	</insert>
	
	<insert id="insertAuthList" parameterType="authListBean">
		INSERT INTO AUTHLIST (AUTHGROUPUID, AUTHINFOUID, STATUS, INSERTBY, INSERTDATE, UPDATEBY, UPDATEDATE)
		VALUES (#{authGroupUid}, #{authInfoUid}, 'ACT', #{userUid}, SYSDATE(), #{userUid}, SYSDATE())
	</insert>
	
	<insert id="insertAuthUser" parameterType="authUserBean">
		INSERT INTO AUTHUSER (AUTHGROUPUID, USERINFOUID, STATUS, INSERTBY, INSERTDATE, UPDATEBY, UPDATEDATE)
		VALUES (#{authGroupUid}, #{userInfoUid}, 'ACT', #{userUid}, SYSDATE(), #{userUid}, SYSDATE())
	</insert>
	
	<select id="getGroup" parameterType="paramBean" resultType="authGroupBean">
		SELECT UID, GROUPNAME, DESCRIPTION, KIND, STATUS 
		FROM AUTHGROUP 
		WHERE UID = #{uid} 
	</select>
	
	<select id="getApprLineToUidForWorker" parameterType="int" resultType="int">
		SELECT TOAUTHGROUPUID
		FROM APPRLINE
		WHERE FROMAUTHGROUPUID = #{uid}
	</select>
	
	<select id="getAuthListList" parameterType="paramBean" resultType="authListBean">
		SELECT AUTHINFOUID 
		FROM AUTHLIST
		WHERE STATUS = 'ACT' AND AUTHGROUPUID = #{uid}
	</select>
	
	<select id="getAuthUserList" parameterType="paramBean" resultType="userInfoBean">
		SELECT UI.UID, UI.USERID, UI.FIRSTNAME, UI.LASTNAME, PC.DESCRIPTION AS POSCODE
		FROM AUTHUSER AU
			LEFT OUTER JOIN USERINFO UI ON (AU.USERINFOUID = UI.UID)
			LEFT OUTER JOIN (
				SELECT DMI.VAL, DMI.DESCRIPTION FROM DOMAIN DM
					LEFT OUTER JOIN DOMAININFO DMI ON (DM.UID = DMI.DOMAINUID)
				WHERE DM.DOMAIN = 'POSCODE' 
			) PC ON (PC.VAL = UI.POSCODE)
		WHERE AU.STATUS = 'ACT' AND AU.AUTHGROUPUID = #{uid}
	</select>
	
	<update id="updateGroup" parameterType="authGroupBean">
		UPDATE AUTHGROUP SET GROUPNAME = #{groupName}, DESCRIPTION = #{description}, KIND = #{kind}, 
			STATUS = #{status}, UPDATEBY = #{userUid}, UPDATEDATE = SYSDATE()
		WHERE UID = #{uid} 
	</update>
	
	<update id="updateLineTo" parameterType="authGroupBean">
		UPDATE APPRLINE SET TOAUTHGROUPUID = #{toUid}, UPDATEDATE = SYSDATE()
		WHERE FROMAUTHGROUPUID = #{uid}
	</update>
	
	<delete id="deleteAuthList" parameterType="int">
		DELETE FROM AUTHLIST WHERE AUTHGROUPUID = #{uid}
	</delete>
	
	<delete id="deleteAuthUser" parameterType="int">
		DELETE FROM AUTHUSER WHERE AUTHGROUPUID = #{uid}
	</delete>
	
	<delete id="deleteLine" parameterType="int">
		DELETE FROM APPRLINE WHERE FROMAUTHGROUPUID = #{uid} OR TOAUTHGROUPUID = #{uid}
	</delete>
	
	<update id="changeStatusGroupForList" parameterType="paramBean">
		UPDATE AUTHGROUP SET STATUS = #{status}, UPDATEBY = #{userUid}, UPDATEDATE = SYSDATE()
		WHERE UID IN 
		<foreach open="(" close=")" collection="uidArr" item="item" separator="," index="index">
			#{item}
		</foreach>
	</update>
	
	<update id="changeStatusGroup" parameterType="paramBean">
		UPDATE AUTHGROUP SET STATUS = #{status}, UPDATEBY = #{userUid}, UPDATEDATE = SYSDATE()
		WHERE UID = #{uid}
	</update>
	
	<delete id="deleteGroup" parameterType="int">
		DELETE FROM AUTHGROUP WHERE UID = #{uid}
	</delete>
	
	<select id="getLineGroupLeaderList" resultType="apprLineBean">
		SELECT AL.UID, AL.FROMAUTHGROUPUID, AL.TOAUTHGROUPUID, AG.GROUPNAME
		FROM APPRLINE AL
			LEFT OUTER JOIN AUTHGROUP AG ON (AL.FROMAUTHGROUPUID = AG.UID)
		WHERE AL.STATUS = 'ACT' AND AL.APPRAUTH = 'CAPTAIN'
		ORDER BY AG.GROUPNAME
	</select>
	
	<select id="getLineWorkerList" parameterType="int" resultType="apprLineBean">
		SELECT AL.UID, AL.FROMAUTHGROUPUID, AL.TOAUTHGROUPUID, AG.GROUPNAME
		FROM APPRLINE AL
			LEFT OUTER JOIN AUTHGROUP AG ON (AL.FROMAUTHGROUPUID = AG.UID)
		WHERE AL.STATUS = 'ACT' AND AL.APPRAUTH = 'GROUP' AND AL.TOAUTHGROUPUID = #{uid}
		ORDER BY AG.GROUPNAME
	</select>
	
	<delete id="deleteLineWorker">
		DELETE FROM APPRLINE WHERE APPRAUTH = 'GROUP'
	</delete>
	
	<insert id="insertLineWorker" parameterType="apprLineBean">
		INSERT INTO APPRLINE (FROMAUTHGROUPUID, TOAUTHGROUPUID, APPRAUTH, STATUS, INSERTBY, INSERTDATE, UPDATEBY, UPDATEDATE)
		VALUES (#{fromAuthGroupUid}, #{toAuthGroupUid}, 'GROUP', 'ACT', #{userUid}, SYSDATE(), #{userUid}, SYSDATE())
	</insert>
	
	<update id="changeStatusUserForList" parameterType="paramBean">
		UPDATE USERINFO SET STATUS = #{status}, UPDATEBY = #{userUid}, UPDATEDATE = SYSDATE()
		WHERE POSCODE NOT IN ('SYSTEM', 'CAPTAIN') AND USERID != 'admin' AND UID IN 
		<foreach open="(" close=")" collection="uidArr" item="item" separator="," index="index">
			#{item}
		</foreach>
	</update>
	
	<update id="deleteUser" parameterType="paramBean">
		UPDATE USERINFO SET STATUS = 'DEL', UPDATEBY = #{userUid}, UPDATEDATE = SYSDATE()
		WHERE POSCODE NOT IN ('SYSTEM', 'CAPTAIN') AND USERID != 'admin' AND UID = #{uid}
	</update>
	
	<delete id="deleteAuthUserForUser" parameterType="int">
		DELETE FROM AUTHUSER WHERE USERINFOUID = #{userUid}
	</delete>
	
	<select id="getUser" parameterType="paramBean" resultType="userInfoBean">
		SELECT U.UID, U.USERID, U.FIRSTNAME, U.LASTNAME, U.POSCODE, U.STATUS, U.SHIPINFOUID, PC.DESCRIPTION AS CODENAME, SI.IMO, SI.TITLE AS SHIPTITLE 
		FROM USERINFO U
			LEFT OUTER JOIN (
				SELECT DMI.VAL, DMI.DESCRIPTION FROM DOMAIN DM
					LEFT OUTER JOIN DOMAININFO DMI ON (DM.UID = DMI.DOMAINUID)
				WHERE DM.DOMAIN = 'POSCODE' 
			) PC ON (PC.VAL = U.POSCODE)
			LEFT OUTER JOIN SHIPINFO SI ON (SI.UID = U.SHIPINFOUID)
		WHERE U.UID = #{uid}
	</select>
	
	<select id="getPosCode" resultType="codeInfoBean">
		SELECT DMI.VAL AS CODE, DMI.DESCRIPTION AS CODENAME 
		FROM DOMAIN DM
			LEFT OUTER JOIN DOMAININFO DMI ON (DM.UID = DMI.DOMAINUID)
		WHERE DM.DOMAIN = 'POSCODE' AND DMI.VAL != 'CAPTAIN'
		ORDER BY DMI.UID
	</select>
	
	<select id="isExistUserId" parameterType="string" resultType="int">
		SELECT COUNT(*)
		FROM USERINFO
		WHERE USERID = #{value}
	</select>
	
	<insert id="insertUser" parameterType="userInfoBean">
		INSERT INTO USERINFO (SHIPINFOUID, USERID, PW, FIRSTNAME, LASTNAME, POSCODE, LANGCODE, STATUS, INSERTBY, INSERTDATE, UPDATEBY, UPDATEDATE)
		VALUES (#{shipInfoUid}, #{userId}, PASSWORD(#{userId}), #{firstName}, #{lastName}, #{posCode}, 'EN', #{status}, #{userUid}, SYSDATE(), #{userUid}, SYSDATE())
		<selectKey resultType="int" keyProperty="uid" order="AFTER">
	        SELECT LAST_INSERT_ID()
	    </selectKey>
	</insert>
	
	<update id="updateUser" parameterType="userInfoBean">
		UPDATE USERINFO SET SHIPINFOUID = #{shipInfoUid}, FIRSTNAME = #{firstName}, LASTNAME = #{lastName}, POSCODE = #{posCode}, 
			STATUS = #{status}, UPDATEBY = #{userUid}, UPDATEDATE = SYSDATE()
		WHERE UID = #{uid}
	</update>
	
	<select id="getCodeGroupList" resultType="codeInfoBean">
		SELECT GROUPCODE AS CODE, GROUPNAME AS CODENAME, 'G' AS KIND
		FROM CODEGROUP
		ORDER BY GROUPNAME
	</select>
	
	<select id="getCodeInfoList" parameterType="string" resultType="codeInfoBean">
		SELECT CODE, CODENAME, 'I' AS KIND
		FROM CODEINFO
		WHERE GROUPCODE = #{value}
		ORDER BY ORD
	</select>
	
	<select id="getUserListForGroup" parameterType="paramBean" resultType="userInfoBean">
		SELECT SQL_CALC_FOUND_ROWS 
			U.UID, U.USERID, U.FIRSTNAME, U.LASTNAME, PC.DESCRIPTION AS POSCODE 
		FROM USERINFO U
			LEFT OUTER JOIN (
				SELECT DMI.VAL, DMI.DESCRIPTION FROM DOMAIN DM
					LEFT OUTER JOIN DOMAININFO DMI ON (DM.UID = DMI.DOMAINUID)
				WHERE DM.DOMAIN = 'POSCODE' 
			) PC ON (PC.VAL = U.POSCODE)
		WHERE U.STATUS = 'ACT'
		ORDER BY U.FIRSTNAME, U.LASTNAME, U.USERID 
		LIMIT #{start}, #{limit}
	</select>
	
	<select id="getUserListForGroupCnt" resultType="int">
		SELECT FOUND_ROWS()
	</select>
	
	<select id="getAuditList" parameterType="paramBean" resultType="auditLogBean">
		SELECT SQL_CALC_FOUND_ROWS 
			A.TARGETTB, A.TARGETDESC, A.KIND, A.DESCRIPTION, A.INSERTBY, 
			DATE_FORMAT(A.INSERTDATE, '%Y-%m-%d %H:%i:%s') AS INSERTDATE, 
			CI.CODENAME, UI.FIRSTNAME, UI.LASTNAME
		FROM AUDITLOG A
			LEFT OUTER JOIN CODEINFO CI ON (CI.GROUPCODE = 'AUDITKIND' AND CI.CODE = A.KIND)
			LEFT OUTER JOIN USERINFO UI ON (A.INSERTBY = UI.UID)
		WHERE 1 = 1
		<if test="kind != null and kind != 'ALL'">
			AND A.KIND = #{kind} 
		</if>
		<if test="tb != null and tb != 'ALL'">
			AND A.TARGETTB = #{tb} 
		</if>
		<if test="startDate != null and startDate.length() == 10">
			AND DATE_FORMAT(A.INSERTDATE, '%Y-%m-%d') <![CDATA[ >= ]]> #{startDate}
		</if>
		<if test="endDate != null and endDate.length() == 10">
			AND DATE_FORMAT(A.INSERTDATE, '%Y-%m-%d') <![CDATA[ <= ]]> #{endDate}
		</if>
		<if test="info != null and info.length() > 0">
			AND UPPER(A.TARGETDESC) LIKE CONCAT('%', UPPER(#{info}), '%')
		</if>
		<if test="description != null and description.length() > 0">
			AND UPPER(A.DESCRIPTION) LIKE CONCAT('%', UPPER(#{description}), '%')
		</if>
		ORDER BY A.UID DESC 
		LIMIT #{start}, #{limit}
	</select>
	
	<select id="getAuditListCnt" resultType="int">
		SELECT FOUND_ROWS()
	</select>
	
	<select id="getGroupListForUser" resultType="authGroupBean">
		SELECT UID, GROUPNAME, DESCRIPTION
		FROM AUTHGROUP 
		WHERE STATUS = 'ACT' AND KIND != 'CAPTAIN'
		ORDER BY GROUPNAME
	</select>
	
	<select id="getGroupListAllowUser" parameterType="int" resultType="authGroupBean">
		SELECT AG.GROUPNAME, AG.DESCRIPTION
		FROM AUTHUSER AU LEFT OUTER JOIN AUTHGROUP AG ON (AU.AUTHGROUPUID = AG.UID)
		WHERE USERINFOUID = #{uid}
	</select>
	
	<select id="getShipInfoList" resultType="shipInfoBean">
		SELECT UID, SHIPNUM, IMO, TITLE FROM SHIPINFO 
		WHERE STATUS = 'ACT'
		ORDER BY ISDEFAULT DESC, IMO
	</select>
</mapper>